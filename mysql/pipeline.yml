---
resource_types:
- name: concourse-version-resource
  type: docker-image
  source:
    repository: meteogroup/concourse-version-resource

resources:
- name: cf-mysql-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/cf-mysql-deployment
    branch: develop

- name: bbl-state
  type: git
  source:
    uri: ((bbl_state_repo))
    branch: master
    private_key: ((git_private_key))

- name: version
  type: concourse-version-resource

jobs:
- name: populate-credhub
  public: true
  serial: true
  plan:
  - get: version
  - get: bbl-state
  - task: populate-credhub
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v6.14.0
      inputs:
      - name: bbl-state
      run:
        path: bash
        args:
        - -exc
        - |
          pushd bbl-state/bbl-state
          set +x
          eval "$(bbl print-env)"
          popd
          ENV_ID=$(cat bbl-state/bbl-state/vars/bbl.tfvars | grep env_id | sed s/^env_id=// | sed s/\"//g)
          CFPSW=$(credhub get -n /bosh-$ENV_ID/cf/cf_admin_password | grep ^value | awk '{print $2}')
          credhub set -n /bosh-$ENV_ID/cf-mysql/cf_admin_password -t value -v $CFPSW
          set -x
  - put: version

- name: deploy-mysql
  public: true
  serial: true
  plan:
  - get: version
    passed: [populate-credhub]
    trigger: true
  - get: cf-mysql-deployment
  - get: bbl-state
  - task: deploy-mysql
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v6.14.0
      inputs:
      - name: bbl-state
      - name: cf-mysql-deployment
      params:
        OPS_FILES: ((ops_files))
      run:
        path: bash
        args:
        - -exc
        - |
          pushd bbl-state/bbl-state
          set +x
          eval "$(bbl print-env)"
          set -x
          popd
          arguments="-l bbl-state/vars/mysql/vars.yml"
          for op in ${OPS_FILES}
          do
            arguments="${arguments} -o cf-mysql-deployment/operations/${op}"
          done
          bosh -n -d cf-mysql deploy cf-mysql-deployment/cf-mysql-deployment.yml ${arguments}
  - put: version
     
- name: broker-registrar
  public: true
  serial: true
  plan:
  - get: version
    passed: [deploy-mysql]
    trigger: true
  - get: bbl-state
  - task: run-errand
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: 
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v6.14.0
      inputs:
      - name: bbl-state
      run:
        path: bash
        args:
        - -exc
        - |
          pushd bbl-state/bbl-state
          set +x
          eval "$(bbl print-env)"
          set -x
          popd
          bosh -n -d cf-mysql run-errand broker-registrar
  - put: version

- name: run-smoke-tests
  public: true
  serial: true
  plan:
  - get: version
    passed: [broker-registrar]
    trigger: true
  - get: bbl-state
  - task: run-errand
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v6.14.0
      inputs:
      - name: bbl-state
      run:
        path: bash
        args:
        - -exc
        - |
          pushd bbl-state/bbl-state
          set +x
          eval "$(bbl print-env)"
          set -x
          popd
          bosh -n -d cf-mysql run-errand smoke-tests

- name: broker-deregistrar
  public: true
  serial: true
  plan:
  - get: bbl-state
    passed: [broker-registrar]
  - task: run-errand
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: amuessig/concourse-bosh}
      params:
        BOSH_ENVIRONMENT: ((bosh-director))
        BOSH_CA_CERT: ((bosh-cert))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        DEPLOYMENT_NAME: ((deployment_name))    
      run:
        path: bash
        args:
        - -exc
        - |
          bosh -d $DEPLOYMENT_NAME run-errand broker-deregistrar
